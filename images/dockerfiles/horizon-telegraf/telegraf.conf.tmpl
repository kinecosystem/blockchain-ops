# this telegraf client runs some simple network latency checks and reports them

# Global tags can be specified here in key="value" format.
[tags]
  app = "horizon"
  node_name = "${NODE_NAME}" # take from env
  stellar_network = "${NETWORK_NAME}" # take from env

# Configuration for telegraf agent
[agent]
  # Default data collection interval for all inputs
  interval = "10s"
  # Rounds collection interval to 'interval'
  # ie, if interval="10s" then always collect on :00, :10, :20, etc.
  round_interval = true

  # Telegraf will cache metric_buffer_limit metrics for each output, and will
  # flush this buffer on a successful write.
  metric_buffer_limit = 10000

  # Collection jitter is used to jitter the collection by a random amount.
  # Each plugin will sleep for a random time within jitter before collecting.
  # This can be used to avoid many plugins querying things like sysfs at the
  # same time, which can have a measurable effect on the system.
  collection_jitter = "0s"

  # Default data flushing interval for all outputs. You should not set this below
  # interval. Maximum flush_interval will be flush_interval + flush_jitter
  flush_interval = "60s"
  # Jitter the flush interval by a random amount. This is primarily to avoid
  # large write spikes for users running a large number of telegraf instances.
  # ie, a jitter of 5s and interval 10s means flushes will happen every 10-15s
  flush_jitter = "0s"

  # Run telegraf in debug mode
  debug = false
  # Run telegraf in quiet mode
  quiet = false
  # Override default hostname, if empty use os.Hostname()
  hostname = ""

###############################################################################
#            OUTPUT: SEND EVERYTHING TO THE METRICS-FORWARDERS                #
###############################################################################

[[outputs.influxdb]]
  urls = ["$FORWARDER_URL"]
  # use this instead for local debug setup
  # urls = ["http://telegraf-forwarder:8086"]

  skip_database_creation = true

  # Timeout for HTTP messages.
  timeout = "5s"

###############################################################################
#                                  INPUTS                                     #
###############################################################################

[[inputs.exec]]
  # runs a script to measture the latency between horizon and its core's /info endpoint
  commands = [ "/opt/telegraf/scripts/check-latency.sh", ]
  name_prefix = "horizon_"
  timeout = "5s"
  data_format = "influx"

[[inputs.exec]]
  # every second, sample the ingestion distance at horizon.
  # ingestion distance is the difference between the latest ledger in core
  # and the latest one ingested by horizon
  commands = [ "/opt/telegraf/scripts/get-ingestion-distance.sh", ]
  interval = "1s"
  name_prefix = "horizon_"
  # Timeout for each command to complete.
  timeout = "1s"
  data_format = "influx"

[[inputs.statsd]]
  # Statsd Server: receives metrics from the statsd plugin on the NGNIX
  # Protocol, must be "tcp", "udp4", "udp6" or "udp" (default=udp)
  protocol = "udp"
  
  name_prefix = "horizon_"

  # aggregate metrics for 60 seconds before sending them
  # https://github.com/influxdata/telegraf/issues/4694#issuecomment-491972462
  interval = "60s"

  # MaxTCPConnection - applicable when protocol is set to tcp (default=250)
  max_tcp_connections = 250

  # Enable TCP keep alive probes (default=false)
  tcp_keep_alive = false

  # Specifies the keep-alive period for an active network connection.
  # Only applies to TCP sockets and will be ignored if tcp_keep_alive is false.
  # Defaults to the OS configuration.
  # tcp_keep_alive_period = "2h"

  # Address and port to host UDP listener on
  service_address = ":8125"

  # The following configuration options control when telegraf clears it's cache
  # of previous values. If set to false, then telegraf will only clear it's
  # cache when the daemon is restarted.
  # Reset gauges every interval (default=true)
  delete_gauges = true
  # Reset counters every interval (default=true)
  delete_counters = true
  # Reset sets every interval (default=true)
  delete_sets = true
  # Reset timings & histograms every interval (default=true)
  delete_timings = true

  # Percentiles to calculate for timing & histogram stats
  percentiles = [50, 70, 90, 95, 99]

  # separator to use between elements of a statsd metric
  metric_separator = "_"

  # Parses tags in the datadog statsd format
  # http://docs.datadoghq.com/guides/dogstatsd/
  parse_data_dog_tags = false

  # Statsd data translation templates, more info can be read here:
  # https://github.com/influxdata/telegraf/blob/master/docs/TEMPLATE_PATTERN.md
  templates = [
       "request_count.* measurement.request_method.status_code.node_name",
       "response_time.* measurement.request_method.status_code.node_name",
  ]

  # Number of UDP messages allowed to queue up, once filled,
  # the statsd server will start dropping packets
  allowed_pending_messages = 10000

  # Number of timing/histogram values to track per-measurement in the
  # calculation of percentiles. Raising this limit increases the accuracy
  # of percentiles but also increases the memory usage and cpu time.
  percentile_limit = 1000

  # Maximum socket buffer size in bytes, once the buffer fills up, metrics
  # will start dropping.  Defaults to the OS default.
  # read_buffer_size = 65535

[[inputs.cloudwatch]]
  # grab RDS metrics for Horizon RDS
  region = "$REGION_NAME"
  period = '1m'
  delay = '5m'
  interval = '5m'
  namespace = 'AWS/RDS'

  [[inputs.cloudwatch.metrics]]
    names = [
      'BurstBalance',
      'CPUUtilization',
      'DatabaseConnections',
      'DiskQueueDepth',
      'FreeableMemory',
      'FreeStorageSpace',
      'MaximumUsedTransactionIDs',
      'NetworkReceiveThroughput',
      'NetworkTransmitThroughput',
      'OldestReplicationSlotLag',
      'ReadIOPS',
      'ReadLatency',
      'ReadThroughput',
      'ReplicationSlotDiskUsage',
      'SwapUsage',
      'TransactionLogsDiskUsage',
      'TransactionLogsGeneration',
      'WriteIOPS',
      'WriteLatency',
      'WriteThroughput',
    ]

    [[inputs.cloudwatch.metrics.dimensions]]
      name = 'DBInstanceIdentifier'
      value = '$RDS_DB_INSTANCE_IDENTIFIER'

###############################################################################
#                             DEBUG OUTPUTS                                   #
###############################################################################

# enable to debug
# [[outputs.file]]
#   files = ["/tmp/metrics.out", "stdout"]
#   data_format = "influx"


# vim: ft=toml
